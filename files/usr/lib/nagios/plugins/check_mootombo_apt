#!/bin/sh
#
#
# MOOTOMBO Nagios Plugin - check_mootombo_apt
#
# Copyright 1997-2016 devXive - research and development. All rights reserved.
#
# http://www.devxive.com
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by devXive to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and devXive and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or devXive distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.
#
#
# Standard Nagios plugin return codes.
STATUS_OK=0
STATUS_WARNING=1
STATUS_CRITICAL=2
STATUS_UNKNOWN=3

# Vars
STATE=$1
if [ "$STATE" = "test" ]; then
	echo "*** TEST STATE ***"
	exit $STATUS_CRITICAL
fi

#
# Query pending updates.
updates=$(/usr/lib/update-notifier/apt-check 2>&1)
#updates_1=$(apt-get -s upgrade | grep "^Inst" | wc -l)
updates_2=$(apt-get -s dist-upgrade | grep "^Inst" | wc -l)
#updates_3=$(apt-get -s dist-upgrade | grep "^Inst" | grep -i security | wc -l)
#
if [ $? -ne 0 ]; then
    echo "*** Querying pending updates failed ***"
    exit $STATUS_UNKNOWN
fi
#
# Check for the case where there are no updates.
if [ "$updates" = "0;0" ]; then
    # Check for the case if the system need to reboot, after updates have all done
    if [ -f /var/run/reboot-required ]; then
        echo "*** System restart required ***"
        exit $STATUS_WARNING
    fi

    # Second check
    if [ "$updates_2" > 0 ]; then
        echo "*** $updates_2 unknown update(s) pending ***"
        exit $STATUS_WARNING
    fi

    echo "All packages are up-to-date!"
    exit $STATUS_OK
fi;
#
# Check for pending security updates.
pending=$(echo "$updates" | cut -d ";" -f 2)
if [ "$pending" != "0" ]; then
    echo "*** $pending security update(s) pending ***"
    exit $STATUS_CRITICAL
fi
#
# Check for pending non-security updates.
pending=$(echo "$updates" | cut -d ";" -f 1)
if [ "$pending" != "0" ]; then
    echo "*** $pending non-security update(s) pending ***"
    exit $STATUS_WARNING
fi
#
# If we've gotten here, we did something wrong since our "0;0" check should have
# matched at the very least.
echo "*** Script failed, manual intervention required ***"
exit $STATUS_UNKNOWN
